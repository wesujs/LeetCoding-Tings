class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        dict_ = {}

        for i in range(len(nums)):
            if target - nums[i] in dict_:
                return [i, dict_[target-nums[i]]]
            else:
                dict_[nums[i]] = i           
            
        return []

"""
Runtime: 37 ms
Beats: 93.93%

Memory: 14.2 MB
Beats: 72.30%

"""

'''
Objective: The objective of this code is to find two numbers in the given "nums" list that add up to the given "target" value and return their indices in a list.

Explanation:
1. Initialize a dictionary: We create an empty dictionary called "dict_". This dictionary will be used to store elements from the "nums" list as keys and their corresponding indices as values.

2. Loop through the "nums" list: The loop runs from index 0 to the last index of the "nums" list.

3. Check if the difference exists in the dictionary:
   - In each iteration, we check if the difference between the "target" and the current element "nums[i]" exists in the "dict_" dictionary. This difference is calculated as "target - nums[i]".
   - If the difference exists as a key in the dictionary, it means that we have already encountered an element in the past whose value, when added to the current element, gives the "target".
   - In that case, we have found the two numbers, and we return a list containing their indices. The current index "i" is the index of the second number, and the value corresponding to the difference in the dictionary is the index of the first number.

4. Store the element and its index in the dictionary:
   - If the difference does not exist in the dictionary, it means we haven't encountered the corresponding element yet.
   - So, we store the current element "nums[i]" as a key in the dictionary and its index "i" as the corresponding value.

5. Return an empty list if no pair found:
   - If the loop ends without finding a pair, the function returns an empty list "[]", indicating that there are no two numbers in the list that add up to the target.

Complexity Analysis:
- Time Complexity: The loop runs in O(n) time, where "n" is the number of elements in the "nums" list. The dictionary operations (lookup and insert) have an average time complexity of O(1) for most practical cases.
- Space Complexity: The space complexity is O(n) because, in the worst case, the dictionary can store all "n" elements from the "nums" list. Other than the dictionary, the function uses a few auxiliary variables that occupy constant space.
'''


